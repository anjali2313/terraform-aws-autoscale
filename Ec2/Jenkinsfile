pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('sec-key')   // Jenkins credential ID for AWS access key
        AWS_SECRET_ACCESS_KEY = credentials('new-id')    // Jenkins credential ID for AWS secret key
        AWS_DEFAULT_REGION    = 'ap-northeast-1'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }

        stage('Terraform Plan') {
            steps {
                sh 'terraform plan -out=tfplan'
            }
        }

        stage('Terraform Apply') {
            steps {
                sh 'terraform apply -auto-approve tfplan'
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { return params.DESTROY == true } // optional boolean param
            }
            steps {
                script {
                    echo "üßπ Cleaning S3 bucket before destroy..."
                    def BUCKET_NAME = "anjali-demo-bucket-2025"

                    // Empty S3 bucket including versions + delete markers
                    sh """
                    aws s3 rm s3://$BUCKET_NAME --recursive || true
                    aws s3api delete-objects --bucket $BUCKET_NAME --delete "\$(aws s3api list-object-versions --bucket $BUCKET_NAME --output=json --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}')" || true
                    aws s3api delete-objects --bucket $BUCKET_NAME --delete "\$(aws s3api list-object-versions --bucket $BUCKET_NAME --output=json --query='{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}')" || true

                    echo "üöÄ Starting Terraform destroy..."
                    terraform destroy -auto-approve
                    """
                }
            }
        }
    }

    post {
        always {
            echo "Terraform pipeline finished."
        }
        success {
            echo "‚úÖ Infrastructure operation completed successfully!"
        }
        failure {
            echo "‚ùå Terraform failed. Check the logs."
        }
    }
}
